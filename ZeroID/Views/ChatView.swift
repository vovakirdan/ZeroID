import SwiftUI

struct ChatView: View {
    @ObservedObject var vm: ChatViewModel
    let connectionState: ConnectionState
    let onBack: () -> Void
    @Environment(\.colorScheme) var colorScheme
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω —á–∞—Ç–∞
    private var chatBackground: some View {
        if colorScheme == .dark {
            // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ - –≥—Ä–∞–¥–∏–µ–Ω—Ç —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏—Ö –æ—Ç—Ç–µ–Ω–∫–æ–≤
            LinearGradient(
                gradient: Gradient(colors: [
                    Color(red: 0.0, green: 0.05, blue: 0.1),
                    Color(red: 0.05, green: 0.1, blue: 0.15),
                    Color(red: 0.02, green: 0.08, blue: 0.12)
                ]),
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
            .ignoresSafeArea(.all)
        } else {
            // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ - —Å–≤–µ—Ç–ª—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            LinearGradient(
                gradient: Gradient(colors: [
                    Color(red: 0.95, green: 0.97, blue: 1.0),
                    Color(red: 0.92, green: 0.95, blue: 0.98),
                    Color(red: 0.90, green: 0.93, blue: 0.96)
                ]),
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
            .ignoresSafeArea(.all)
        }
    }
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    private var waitingConnectionView: some View {
        VStack(spacing: 16) {
            LoaderView(text: "–ñ–¥—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            Text("‚ö†Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
                .foregroundColor(.orange)
                .font(.caption)
        }
        .padding()
    }
    
    // –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    private var messagesList: some View {
        ScrollViewReader { proxy in
            ScrollView {
                LazyVStack(spacing: 8) {
                    ForEach(vm.messages) { msg in
                        ChatBubble(
                            text: msg.text,
                            isMine: msg.isMine,
                            timestamp: msg.date
                        )
                        .id(msg.id)
                    }
                }
                .padding(.vertical, 8)
            }
            .onChange(of: vm.messages.count) { oldCount, newCount in
                if let lastMessage = vm.messages.last {
                    withAnimation(.easeOut(duration: 0.3)) {
                        proxy.scrollTo(lastMessage.id, anchor: .bottom)
                    }
                }
            }
        }
    }
    
    // –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
    private var chatArea: some View {
        ZStack {
            chatBackground
            
            if !vm.webrtc.isConnected {
                waitingConnectionView
            } else {
                messagesList
            }
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    private var canSendMessage: Bool {
        vm.webrtc.isConnected && !vm.inputText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
    }
    
    // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∏–Ω–ø—É—Ç –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
    private var inputFieldBackground: Color {
        if colorScheme == .dark {
            return Color(red: 0.12, green: 0.12, blue: 0.12, opacity: 0.7)
        } else {
            return Color(red: 0.95, green: 0.95, blue: 0.95, opacity: 0.8)
        }
    }
    
    // –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –∏–Ω–ø—É—Ç –ø–æ–ª—è
    private var inputFieldBorder: Color {
        if vm.inputText.isEmpty {
            return colorScheme == .dark ? Color.gray.opacity(0.3) : Color.gray.opacity(0.5)
        } else {
            return Color.accentColor
        }
    }
    
    // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    private var textInputField: some View {
        HStack {
            TextField("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", text: $vm.inputText, axis: .vertical)
                .font(.body)
                .foregroundColor(colorScheme == .dark ? .white : .black)
                .padding(.horizontal, 16)
                .padding(.vertical, 10)
                .lineLimit(1...5)
        }
        .background(
            RoundedRectangle(cornerRadius: 20, style: .continuous)
                .fill(inputFieldBackground)
        )
        .overlay(
            RoundedRectangle(cornerRadius: 20, style: .continuous)
                .stroke(inputFieldBorder, lineWidth: 1)
        )
    }
    
    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    private var sendButton: some View {
        Button(action: {
            if canSendMessage {
                vm.sendMessage() 
            } else {
                print("[ChatView] Cannot send message - not connected or empty")
            }
        }) {
            Image(systemName: "arrow.up.circle.fill")
                .font(.title2)
                .foregroundStyle(
                    canSendMessage ? 
                    AnyShapeStyle(Color.primaryGradient) : 
                    AnyShapeStyle(Color.gray.opacity(0.5))
                )
        }
        .disabled(!canSendMessage)
        .scaleEffect(canSendMessage ? 1.0 : 0.8)
        .animation(.spring(response: 0.3), value: vm.inputText)
    }
    
    // –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ñ–æ–Ω–æ–º
    private var inputArea: some View {
        VStack(spacing: 0) {
            Divider()
                .background(Color.gray.opacity(0.3))
            
            HStack(spacing: 12) {
                textInputField
                sendButton
            }
            .padding(.horizontal, 16)
            .padding(.vertical, 12)
            .background(
                Rectangle()
                    .fill(
                        colorScheme == .dark 
                        ? Color.black.opacity(0.8) 
                        : Color.white.opacity(0.9)
                    )
                    .blur(radius: 10)
            )
        }
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
    private var headerView: some View {
        HStack {
            Button(action: onBack) {
                Image(systemName: "chevron.backward")
                    .font(.title2)
                    .foregroundColor(Color.accentColor)
            }
            .padding(.leading, 4)
            
            Spacer()
            
            Text("–°–µ–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç")
                .font(.headline)
                .foregroundColor(Color.textPrimary)
            
            Spacer()
        }
        .padding(.horizontal)
    }
    
    // –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –¥–µ–±–∞–≥–∞
    private var connectionStatusView: some View {
        VStack(spacing: 4) {
            Text("DataChannel: \(vm.webrtc.dataChannelState)")
                .font(.caption)
                .foregroundColor(vm.webrtc.isConnected ? .green : .orange)
            Text("ICE: \(vm.webrtc.iceConnectionState)")
                .font(.caption)
                .foregroundColor(.blue)
            Text("\(vm.webrtc.iceGatheringState)")
                .font(.caption)
                .foregroundColor(.purple)
            Text("–ö–∞–Ω–¥–∏–¥–∞—Ç—ã: \(vm.webrtc.candidateCount)")
                .font(.caption)
                .foregroundColor(.brown)
            Text("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: \(vm.webrtc.isConnected ? "–∞–∫—Ç–∏–≤–Ω–æ" : "–Ω–µ –≥–æ—Ç–æ–≤–æ")")
                .font(.caption)
                .foregroundColor(vm.webrtc.isConnected ? .green : .red)
        }
        .padding(.horizontal)
        .padding(.vertical, 8)
        .background(
            RoundedRectangle(cornerRadius: 8)
                .fill(
                    colorScheme == .dark 
                    ? Color.surfaceMuted 
                    : Color.gray.opacity(0.1)
                )
        )
        .padding(.horizontal)
    }
    
    var body: some View {
        VStack {
            headerView
            connectionStatusView
            chatArea
            inputArea
        }
        .background(Color.background)
        .navigationBarHidden(true)
    }
}

#Preview {
    let mockVM = ChatViewModel()
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    let now = Date()
    mockVM.messages = [
        // –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        Message(text: "–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ –¥–µ–ª–∞?", isMine: false, date: now.addingTimeInterval(-600)),
        Message(text: "–¢—ã —É–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞?", isMine: false, date: now.addingTimeInterval(-500)),
        Message(text: "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –≤ –ø—É–∑—ã—Ä—å–∫–µ —á–∞—Ç–∞. –î–æ–ª–∂–Ω–æ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫—Ä–∞—Å–∏–≤–æ –∏ —á–∏—Ç–∞–µ–º–æ.", isMine: false, date: now.addingTimeInterval(-400)),
        
        // –ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        Message(text: "–ü—Ä–∏–≤–µ—Ç! –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! üòä", isMine: true, date: now.addingTimeInterval(-350)),
        Message(text: "–î–∞, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—É—á–∏–ª—Å—è –∫–ª–∞—Å—Å–Ω—ã–π!", isMine: true, date: now.addingTimeInterval(-300)),
        Message(text: "–ö–æ—Ä–æ—Ç–∫–æ–µ", isMine: true, date: now.addingTimeInterval(-250)),
        
        // –ï—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        Message(text: "–û—Ç–ª–∏—á–Ω–æ! üéâ", isMine: false, date: now.addingTimeInterval(-200)),
        Message(text: "–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ä–µ–ª–∏–∑?", isMine: false, date: now.addingTimeInterval(-150)),
        
        // –ï—â–µ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        Message(text: "–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–π–¥–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", isMine: true, date: now.addingTimeInterval(-100)),
        Message(text: "ü§û", isMine: true, date: now.addingTimeInterval(-50))
    ]
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–∞
    mockVM.webrtc.isConnected = true

    return ChatView(
        vm: mockVM,
        connectionState: .connected,
        onBack: {}
    )
}
