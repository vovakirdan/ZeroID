import SwiftUI
import UIKit
import UniformTypeIdentifiers

struct ChatView: View {
    @ObservedObject var vm: ChatViewModel
    let connectionState: ConnectionState
    let onBack: () -> Void
    @Environment(\.colorScheme) var colorScheme
    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
    @State private var showConnectionInfo: Bool = false
    // –ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞
    @State private var showFileImporter: Bool = false
    
    // –ï–¥–∏–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω —á–∞—Ç–∞ (—Ü–≤–µ—Ç–∞ –±–µ—Ä—É—Ç—Å—è –∏–∑ Assets)
    private var chatBackground: some View {
        Color.chatBackgroundGradient
            .ignoresSafeArea(.all)
    }
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º)
    private var waitingConnectionView: some View {
        VStack(spacing: 12) {
            LoaderView(text: "–ñ–¥—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            Text("‚ö†Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
                .foregroundColor(.orange)
                .font(.caption)
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .contentShape(Rectangle())
    }
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–≤–µ—Ä–∫–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ (–Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω)
    private var waitingFingerprintView: some View {
        VStack(spacing: 12) {
            LoaderView(text: "–°–≤–µ—Ä–∫–∞ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤...")
            Text("üîê –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤...")
                .foregroundColor(.blue)
                .font(.caption)
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .contentShape(Rectangle())
    }
    
    // –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    private var messagesList: some View {
        ScrollViewReader { proxy in
            ScrollView {
                LazyVStack(spacing: 8) {
                    ForEach(vm.messages) { msg in
                        if let media = msg.media {
                            MediaBubbleView(attachment: media, isMine: msg.isMine, timestamp: msg.date)
                                .id(msg.id)
                                .transition(.asymmetric(insertion: .opacity.combined(with: .move(edge: .bottom)),
                                                        removal: .opacity.combined(with: .scale)))
                        } else {
                            ChatBubble(
                                text: msg.text,
                                isMine: msg.isMine,
                                timestamp: msg.date
                            )
                            .id(msg.id)
                            .transition(.asymmetric(insertion: .opacity.combined(with: .move(edge: .bottom)),
                                                    removal: .opacity.combined(with: .scale)))
                        }
                    }
                }
                .padding(.vertical, 8)
            }
            .scrollDismissesKeyboard(.interactively)
            .onChange(of: vm.messages.count) { _ in
                if let lastMessage = vm.messages.last {
                    withAnimation(.easeOut(duration: 0.25)) {
                        proxy.scrollTo(lastMessage.id, anchor: .bottom)
                    }
                }
            }
        }
    }
    
    // –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
    private var chatArea: some View {
        ZStack {
            if !vm.webrtc.isConnected {
                waitingConnectionView
            } else if !vm.webrtc.isChatEnabled {
                waitingFingerprintView
            } else {
                messagesList
            }
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    private var canSendMessage: Bool {
        vm.webrtc.isConnected && 
        vm.webrtc.isChatEnabled && 
        !vm.inputText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
    }
    
    // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∏–Ω–ø—É—Ç –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
    private var inputFieldBackground: Color {
        if colorScheme == .dark {
            return Color(red: 0.12, green: 0.12, blue: 0.12, opacity: 0.7)
        } else {
            return Color(red: 0.95, green: 0.95, blue: 0.95, opacity: 0.8)
        }
    }
    
    // –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –∏–Ω–ø—É—Ç –ø–æ–ª—è
    private var inputFieldBorder: Color {
        if vm.inputText.isEmpty {
            return colorScheme == .dark ? Color.gray.opacity(0.3) : Color.gray.opacity(0.5)
        } else {
            return Color.accentColor
        }
    }
    
    // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    private var textInputField: some View {
        HStack {
            TextField("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", text: $vm.inputText, axis: .vertical)
                .font(.body)
                .foregroundColor(colorScheme == .dark ? .white : .black)
                .padding(.horizontal, 16)
                .padding(.vertical, 10)
                .lineLimit(1...5)
        }
        .background(
            RoundedRectangle(cornerRadius: 20, style: .continuous)
                .fill(inputFieldBackground)
        )
        .overlay(
            RoundedRectangle(cornerRadius: 20, style: .continuous)
                .stroke(inputFieldBorder, lineWidth: 1)
        )
    }
    
    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    private var sendButton: some View {
        Button(action: {
            if canSendMessage {
                vm.sendMessage() 
            } else {
                print("[ChatView] Cannot send message - not connected or empty")
            }
        }) {
            Image(systemName: "arrow.up.circle.fill")
                .font(.largeTitle)
                .foregroundStyle(
                    canSendMessage ? 
                    AnyShapeStyle(Color.primaryGradient) : 
                    AnyShapeStyle(Color.gray.opacity(0.5))
                )
        }
        .disabled(!canSendMessage)
        .scaleEffect(canSendMessage ? 1.0 : 0.8)
        .animation(.spring(response: 0.3), value: vm.inputText)
    }
    
    // –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ñ–æ–Ω–æ–º
    private var inputArea: some View {
        VStack(spacing: 0) {
            Divider()
                .background(Color.gray.opacity(0.3))
            
            HStack(spacing: 12) {
                Button {
                    showFileImporter = true
                } label: {
                    Image(systemName: "paperclip")
                        .font(.title2)
                        .foregroundColor(.accentColor)
                }
                .disabled(!vm.webrtc.isConnected || !vm.webrtc.isChatEnabled)

                textInputField
                sendButton
            }
            .padding(.horizontal, 16)
            .padding(.vertical, 12)
            .background(.thinMaterial)
        }
        .background(.ultraThinMaterial)
    }
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
    private var connectionInfoModal: some View {
        VStack(spacing: 16) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
            HStack {
                Text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏")
                    .font(.headline)
                    .foregroundColor(Color.textPrimary)
                
                Spacer()
                
                Button(action: { showConnectionInfo = false }) {
                    Image(systemName: "xmark.circle.fill")
                        .font(.title2)
                        .foregroundColor(Color.textSecondary)
                }
            }
            .padding(.horizontal)
            .padding(.top)
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
            VStack(spacing: 12) {
                InfoRow(title: "DataChannel", value: vm.webrtc.dataChannelState, color: vm.webrtc.isConnected ? .green : .orange)
                InfoRow(title: "ICE Connection", value: vm.webrtc.iceConnectionState, color: .blue)
                InfoRow(title: "ICE Gathering", value: vm.webrtc.iceGatheringState, color: .purple)
                InfoRow(title: "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã", value: "\(vm.webrtc.candidateCount)", color: .brown)
                InfoRow(title: "–°—Ç–∞—Ç—É—Å", value: vm.webrtc.isConnected ? "–∞–∫—Ç–∏–≤–Ω–æ" : "–Ω–µ –≥–æ—Ç–æ–≤–æ", color: vm.webrtc.isConnected ? .green : .red)
            }
            .padding(.horizontal)
            
            Spacer()
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(Color.surfacePrimary)
        .cornerRadius(20, corners: [.topLeft, .topRight, .bottomLeft, .bottomRight])
        .shadow(radius: 10)
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    private func InfoRow(title: String, value: String, color: Color) -> some View {
        HStack {
            Text(title)
                .font(.body)
                .foregroundColor(Color.textSecondary)
            
            Spacer()
            
            Text(value)
                .font(.body)
                .foregroundColor(color)
                .fontWeight(.medium)
        }
        .padding(.vertical, 4)
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ù–∞–∑–∞–¥ –∏ Info
    private var headerView: some View {
        HStack {
            // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
            Button(action: onBack) {
                Image(systemName: "chevron.backward")
                    .font(.title2)
                    .foregroundColor(Color.accentColor)
            }
            
            Spacer()
            
            Text("–°–µ–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç")
                .font(.headline)
                .foregroundColor(Color.textPrimary)
                .frame(maxWidth: .infinity)
                .multilineTextAlignment(.center)
            
            Spacer()
            
            // –ö–Ω–æ–ø–∫–∞ info
            Button(action: { showConnectionInfo.toggle() }) {
                Image(systemName: "info.circle")
                    .font(.title2)
                    .foregroundColor(Color.accentColor)
            }
        }
        .padding(.horizontal)
    }
    
    // –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –¥–µ–±–∞–≥–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–æ–≥–¥–∞ showConnectionInfo == true)
    private var connectionStatusView: some View {
        VStack(spacing: 4) {
            Text("DataChannel: \(vm.webrtc.dataChannelState)")
                .font(.caption)
                .foregroundColor(vm.webrtc.isConnected ? .green : .orange)
            Text("ICE: \(vm.webrtc.iceConnectionState)")
                .font(.caption)
                .foregroundColor(.blue)
            Text("\(vm.webrtc.iceGatheringState)")
                .font(.caption)
                .foregroundColor(.purple)
            Text("–ö–∞–Ω–¥–∏–¥–∞—Ç—ã: \(vm.webrtc.candidateCount)")
                .font(.caption)
                .foregroundColor(.brown)
            Text("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: \(vm.webrtc.isConnected ? "–∞–∫—Ç–∏–≤–Ω–æ" : "–Ω–µ –≥–æ—Ç–æ–≤–æ")")
                .font(.caption)
                .foregroundColor(vm.webrtc.isConnected ? .green : .red)
        }
        .padding(.horizontal)
        .padding(.vertical, 8)
        .background(
            RoundedRectangle(cornerRadius: 8)
                .fill(
                    colorScheme == .dark 
                    ? Color.surfaceMuted 
                    : Color.gray.opacity(0.1)
                )
        )
        .padding(.horizontal)
    }
    
    // –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —Ç–∞–ø—É
    private func dismissKeyboard() {
        UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
    }

    var body: some View {
        VStack(spacing: 0) {
            headerView
            chatArea
                .contentShape(Rectangle())
                .onTapGesture { dismissKeyboard() }
        }
        .safeAreaInset(edge: .bottom) { inputArea }
        .ignoresSafeArea(.keyboard, edges: .bottom)
        .background(chatBackground)
        .navigationBarHidden(true)
        .overlay(
            // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            Group {
                if showConnectionInfo {
                    Color.black.opacity(0.3)
                        .ignoresSafeArea()
                        .onTapGesture {
                            showConnectionInfo = false
                        }
                    
                    VStack {
                        Spacer()
                        connectionInfoModal
                    }
                    .transition(.move(edge: .bottom))
                }
            }
        )
        .animation(.spring(response: 0.5, dampingFraction: 0.8), value: showConnectionInfo)
        .fileImporter(isPresented: $showFileImporter, allowedContentTypes: [UTType.item], allowsMultipleSelection: false) { result in
            switch result {
            case .success(let urls):
                if let url = urls.first {
                    vm.sendFile(url: url)
                }
            case .failure(let err):
                print("[ChatView] File import error", err.localizedDescription)
            }
        }
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        .overlay(alignment: .top) {
            HStack(spacing: 6) {
                Circle()
                    .fill(vm.webrtc.isConnected ? Color.green : Color.orange)
                    .frame(width: 8, height: 80)
                Text(vm.webrtc.isConnected ? (vm.webrtc.isChatEnabled ? "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ" : "–ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤") : "–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                    .font(.caption2)
                    .foregroundColor(.white)
                    .padding(.vertical, 6)
                    .padding(.horizontal, 10)
                    .background(Color.black.opacity(0.35))
                    .cornerRadius(12)
            }
            .padding(.top, 6)
        }
    }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É–≥–ª–æ–≤
extension View {
    func cornerRadius(_ radius: CGFloat, corners: UIRectCorner) -> some View {
        clipShape(RoundedCorner(radius: radius, corners: corners))
    }
}

struct RoundedCorner: Shape {
    var radius: CGFloat = .infinity
    var corners: UIRectCorner = .allCorners

    func path(in rect: CGRect) -> Path {
        let path = UIBezierPath(
            roundedRect: rect,
            byRoundingCorners: corners,
            cornerRadii: CGSize(width: radius, height: radius)
        )
        return Path(path.cgPath)
    }
}

// MARK: - Media bubble UI
struct MediaBubbleView: View {
    let attachment: MediaAttachment
    let isMine: Bool
    let timestamp: Date

    var body: some View {
        HStack(alignment: .bottom, spacing: 0) {
            if isMine { Spacer(minLength: 60) }
            VStack(alignment: isMine ? .trailing : .leading, spacing: 6) {
                Group {
                    if let data = attachment.data, let uiImage = UIImage(data: data), attachment.mime.starts(with: "image/") {
                        Image(uiImage: uiImage)
                            .resizable()
                            .scaledToFit()
                            .frame(maxWidth: 220)
                            .clipShape(RoundedRectangle(cornerRadius: 16, style: .continuous))
                    } else {
                        HStack(spacing: 8) {
                            Image(systemName: "doc")
                            Text(attachment.name)
                                .lineLimit(1)
                        }
                        .padding(.horizontal, 12)
                        .padding(.vertical, 10)
                        .background(
                            RoundedRectangle(cornerRadius: 16, style: .continuous)
                                .fill(Color(red: 0.15, green: 0.15, blue: 0.15, opacity: 0.85))
                        )
                        .foregroundColor(.white)
                    }
                }

                if let p = attachment.progress {
                    ProgressView(value: p)
                        .progressViewStyle(.linear)
                        .frame(maxWidth: 220)
                }

                Text(timestamp, style: .time)
                    .font(.caption2)
                    .foregroundColor(Color(red: 0.7, green: 0.7, blue: 0.7))
                    .padding(.horizontal, isMine ? 20 : 16)
            }
            if !isMine { Spacer(minLength: 60) }
        }
        .padding(.horizontal, 16)
        .padding(.vertical, 3)
    }
}

#Preview {
    let mockVM = ChatViewModel()
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    let now = Date()
    mockVM.messages = [
        // –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        Message(text: "–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ –¥–µ–ª–∞?", isMine: false, date: now.addingTimeInterval(-600)),
        Message(text: "–¢—ã —É–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞?", isMine: false, date: now.addingTimeInterval(-500)),
        Message(text: "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –≤ –ø—É–∑—ã—Ä—å–∫–µ —á–∞—Ç–∞. –î–æ–ª–∂–Ω–æ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫—Ä–∞—Å–∏–≤–æ –∏ —á–∏—Ç–∞–µ–º–æ.", isMine: false, date: now.addingTimeInterval(-400)),
        
        // –ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        Message(text: "–ü—Ä–∏–≤–µ—Ç! –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! üòä", isMine: true, date: now.addingTimeInterval(-350)),
        Message(text: "–î–∞, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—É—á–∏–ª—Å—è –∫–ª–∞—Å—Å–Ω—ã–π!", isMine: true, date: now.addingTimeInterval(-300)),
        Message(text: "–ö–æ—Ä–æ—Ç–∫–æ–µ", isMine: true, date: now.addingTimeInterval(-250)),
        
        // –ï—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        Message(text: "–û—Ç–ª–∏—á–Ω–æ! üéâ", isMine: false, date: now.addingTimeInterval(-200)),
        Message(text: "–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ä–µ–ª–∏–∑?", isMine: false, date: now.addingTimeInterval(-150)),
        
        // –ï—â–µ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        Message(text: "–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–π–¥–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", isMine: true, date: now.addingTimeInterval(-100)),
        Message(text: "ü§û", isMine: true, date: now.addingTimeInterval(-50))
    ]
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–∞
    mockVM.webrtc.isConnected = true // false - –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    mockVM.webrtc.isChatEnabled = true  // false - –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä —Å–≤–µ—Ä–∫–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤

    return ChatView(
        vm: mockVM,
        connectionState: .connected,
        onBack: {}
    )
}
